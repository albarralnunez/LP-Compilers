<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: fonts.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
#include <map>
using namespace std;

const double PI  =3.141592653589793238463;

// struct to store information about tokens
typedef struct {
  string kind;
  string text;
} Attrib;

// function to fill token information (predeclaration)
void zzcr_attr(Attrib *attr, int type, char *text);

// fields for AST nodes
#define AST_FIELDS string kind; string text;
#include "ast.h"

// macro to create a new AST node (and function predeclaration)
#define zzcr_ast(as,attr,ttype,textt) as=createASTnode(attr,ttype,textt)
AST* createASTnode(Attrib* attr,int ttype, char *textt);
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = 1;
	>>

[\ \n]
	<<
		NLA = SPACE;
    zzskip();  
	>>

\,
	<<
		NLA = COM;
	>>

\(
	<<
		NLA = PAROP;
	>>

\)
	<<
		NLA = PARCL;
	>>

\[
	<<
		NLA = FONTOP;
	>>

\]
	<<
		NLA = FONTCL;
	>>

=
	<<
		NLA = ASS;
	>>

\|
	<<
		NLA = ADD;
	>>

\\
	<<
		NLA = ADDRL;
	>>

/
	<<
		NLA = ADDRR;
	>>

\+
	<<
		NLA = PLUS;
	>>

\*
	<<
		NLA = MUL;
	>>

[0-9]+
	<<
		NLA = INT;
	>>

play
	<<
		NLA = PLAYFONT;
	>>

area
	<<
		NLA = ARE;
	>>

altu
	<<
		NLA = ALT;
	>>

blau
	<<
		NLA = BL;
	>>

vermell
	<<
		NLA = VERM;
	>>

groc
	<<
		NLA = GR;
	>>

verd
	<<
		NLA = VERD;
	>>

on
	<<
		NLA = ON;
	>>

off
	<<
		NLA = OFF;
	>>

[a-zA-Z]+[0-9]*
	<<
		NLA = VAR;
	>>

%%
